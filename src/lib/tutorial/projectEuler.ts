
import type { TutorialSection } from './types';

export const projectEuler: TutorialSection = {
    name: "Yield for fun: Project Euler",
    description: "Solving classic programming puzzles with Yield is a great way to learn the language. Here are a few examples from Project Euler. The given solutions are not optimized in any way and Yield is running generator functions in JavaScript pushing and popping values to arrays in unnecessarily complex manner.",
    cells: [
        {
            name: "Problem 1: Multiples of 3 and 5",
            description: "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.",
            example: `
# 1. Generate numbers from 1 to 999
1 999 range

# 2. Filter for multiples of 3 or 5
(dup 3 % 0 == swap 5 % 0 == or) filter

# 3. Sum the resulting list
sum
`.trim(),
            expected: [233168]
        },
        {
            name: "Problem 2: Even Fibonacci Numbers",
            description: "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.",
            example: `
# Generator for Fibonacci numbers: 1, 2, 3, 5...
((0 1) (swap dupd +) yield) fib =>

# Summing the even ones, then pop the final number (>4M).
(fib dup 4000000 <) (dup 2 % 0 == (+) (pop) ?) while pop
`.trim(),
            expected: [4613732]
        },
        {
            name: "Problem 3: Largest Prime Factor",
            description: "The prime factors of 13195 are 5, 7, 13 and 29.\nWhat is the largest prime factor of the number 600851475143?",
            example: `
# The strategy is to find the smallest prime factors first and divide them out
600851475143

# Handle all factors of 2 - the number here is odd, but this is for good practice:
(dup 2 % 0 ==) (2 /) while

# Start checking for odd divisors from 3
3

# Loop while D*D <= N. If D gets bigger than sqrt(N), the remaining N must be prime.
(over over dup * swap <=)
(over over % 0 == (swap over / swap) (2 +) ?) 
while

# After the loop, the stack is [N D]. The remaining N is the largest prime factor. Discard D.
pop
`.trim(),
            expected: [6857]
        },
        {
            name: "Problem n: Only 947 more to go...",
            description: "These are just a few examples to get you started. For a full list of challenging and fun mathematical problems that may or may not be good fit for concatenative languages, visit the Project Euler website: https://projecteuler.net/. There's surely enough to make you Yield!",
            example: `# Happy Yielding!`
        }
    ]
};
